# -*- coding: utf-8 -*-
import pandas as pd
import numpy as np
import xlsxwriter as xlsw
import matplotlib.pyplot as plt 

#read in data from excel 
df = pd.read_excel (r'C:\Users\Lillian\Desktop\PilotCWdata.xlsx', sheet_name='InputData')

#create arrays from excel data
day = np.asarray(list(df['Day']))
P = np.asarray(list(df['Precipitation']))
temp = np.asarray(list(df['Temperature']))
COD_i = np.asarray(list(df['sCOD'])) 
OrgN_i = np.asarray(list(df['Organic N']))       
NH4_i = np.asarray(list(df['Ammonium']))  
NO3_i = np.asarray(list(df['Nitrate']))   
 
########## Water Balance Functions ########
#Horizontal flow CW dimensions
HF_width = 0.7874  #m
HF_length = 1.397  #m 
HF_height = 0.4572 #m 
HF_area = HF_width * HF_length #m2 

#Vertical flow CW dimensions
VF_width = 0.6477  #m
VF_length = 0.6477 #m
VF_height = 0.9398 #m
VF_area = VF_width * VF_length #m2

#create inflow set the same size as the input data
def VF_Qi(): 
 inflow = [0.08] * 172 #m3/day
 return inflow

#store results in an array
VF_Qi = np.asarray(VF_Qi())
#VF outflow equals VF inflow 
VF_Qo = VF_Qi
#HF inflow equals VF outflow
HF_Qi = VF_Qo

#calculate HF outflow (cubic m/day)
def HF_Qo():
    #hydraulic conductivity
    K = 571 #m/day
    #cross-sectional area
    A = HF_width*HF_height
    #Darcy's equation
    HF_Qo = [K*A*(.0005/HF_length)] * 172
    return HF_Qo
 
#store results in an array
HF_Qo = np.asarray(HF_Qo())

#calculate evapotranspiration (m/day)
def ET():
    #day length
    dl = 11    #hour
    #heat index
    I = 167.1  #C
    a = 6.75*(10**-7)*(I**3)-7.71*(10**-5)*(I**2)+1.792*(10**-2)*I+0.49239 
    #Thortwaite's equation
    ET = 16*dl/12*((10*temp/I)**a)/(30*100)/10
    return ET

#store results in an array
ET = np.asarray(ET())    

######### Water Balances ########
def VF_volume(): 
    #initial water volume
    VF_volume = 0.06                             #m3
    #water balance equation
    dVdt = VF_Qi-VF_Qi+(P*VF_area)-(ET*VF_area)  #m3/day
    #store result in array
    dVdt = np.asarray(dVdt)                      #m3/day
    #volume equals intial plus change each day 
    VF_volume += dVdt                            #m3
    return VF_volume*1000                        #L

def HF_volume(): 
    #initial water volume
    HF_volume = 0.110                            #m3
    #water balance equation
    dVdt = HF_Qi-HF_Qo+(P*HF_area)-(ET*HF_area)  #m3/day
    #store result in array
    dVdt = np.asarray(dVdt)                      #m3
    #volume equals intial plus change each day 
    HF_volume += dVdt                            #m3
    return HF_volume*1000                        #L

#store results in an array
VF_volume = np.asarray(VF_volume())    
HF_volume = np.asarray(HF_volume())

########### Oxygen Balance Functions #########
#create inflow set the same size as the input data
def DO_i():
  initial = [2.0]*172     #mg/L
  return initial

#store results in an array
DO_i = np.asarray(DO_i())

#water temperature
T = 295.75    #K
#conductivity
Cond = 15.3   #mS/cm
#chlorinity
Chl = ((0.4665*Cond**1.0878)-0.03)/1.805

def VF_JO2():
    #transfer coefficient 
    VF_kR = .275  #(per day)
    #calculate DO saturation
    DO_s = 2.71828**(-139.34411+((1.5775*10**5)/T)-((6.642308*10**7)/(T**2))+((1.248*10**10)/(T**3))-((8.621949*10**11)/(T**4))-(Chl*((3.1929*10**-2)-((1.9428*10)/T)+(1.8673*10**3)/(T**2))))/10
    #store results in array
    DO_s = np.asarray(DO_s)
    #calculate mass flux 
    VF_JO2 = VF_kR*(DO_s-DO_i)
    return VF_JO2

#store results in an array
VF_JO2 = np.asarray(VF_JO2())

def HF_JO2():
    #transfer coefficient 
    HF_kR = .095  #(per day)
    #calculate DO saturation
    DO_s = 2.71828**(-139.34411+((1.5775*10**5)/T)-((6.642308*10**7)/(T**2))+((1.248*10**10)/(T**3))-((8.621949*10**11)/(T**4))-(Chl*((3.1929*10**-2)-((1.9428*10)/T)+(1.8673*10**3)/(T**2))))/10
    #store results in array
    DO_s = np.asarray(DO_s)
    #calculate mass flux 
    HF_JO2 = HF_kR*(DO_s-DO_i)
    return HF_JO2

#store results in an array
HF_JO2 = np.asarray(HF_JO2())

#rates of respiration (per day)
VF_kN =  0.079 #nitrifiers
VF_kAH = 0.97  #aerobic heterotrophs

HF_kN = 0.079  #nitrifiers
HF_kAH = 0.97  #aerobic heterotrophs

#DO mass balances
def VF_DO():
    #change in DO equation
    DOdt = VF_JO2-(VF_kN*DO_i)-(VF_kAH*DO_i)
    #store results in array
    DOdt = np.asarray(DOdt)
    #DO equals intial plus change each day
    VF_DO = DO_i + DOdt
    return VF_DO

def HF_DO():
    #change in DO equation
    DOdt = HF_JO2-(HF_kN*DO_i)-(VF_kAH*DO_i)
    #store results in array
    DOdt = np.asarray(DOdt)
    #DO equals intial plus change each day
    HF_DO = DO_i + DOdt
    return HF_DO

########## COD Balance Functions #########
Q = VF_Qi*1000 #L
Qi = Q
Qo = HF_Qo*1000 #L

#rates of utilization (mg/L*day)
VF_kD = 10 #denitrifiers
VF_kH = 35 #aerobic heterotrophs 

HF_kD = 69 #denitrifiers
HF_kH = 0  #aerobic heterotrophs 

#COD mass balance solutions
VF_COD = ((Q*COD_i)-(VF_kD*VF_volume)-(VF_kH*VF_volume))/Q
HF_COD = ((Qi*VF_COD)-(HF_kD*HF_volume)-(HF_kH*HF_volume))/Qo

########## Nitrogen Balance Functions #########
#Background concentrations (mg/L)
OrgN_0 = 0.5
NH4_0 = 0     
NO3_0 = 0     
          
######Rate constants 
#plant decomposition (per day)
VF_kpd = 0
HF_kpd = .014

#mineralization (per day)
km_a = 0.05 #aerobic
km_an = 0.08 #anaerobic

#nitrification (mg/L*day)
kn_a =  200 #aerobic 
kn_an = 40 #anaerobic

#plant uptake of ammonia (mg/L*day)
VF_kpu_NH4 = 0
HF_kpu_NH4 = 1

#denitrification (per day)
kdn_an = 2.0 #aerobic 
kdn_a = 1.0  #anaerobic 

#plant uptake of nitrate (per day)
VF_kpu_NO3 = 0.05
HF_kpu_NO3 = 0.1

#nitrogen mass balance solutions 
def VF_OrgN():
    if np.any(VF_DO) < 1:
        km = km_an
    else: km = km_a
    VF_OrgN =(Q*OrgN_i)/(Q-(VF_kpd*VF_volume)+(km*VF_volume))+OrgN_0
    return VF_OrgN

def HF_OrgN():
    if np.any(HF_DO) < 1:
        km = km_an
    else: km = km_a
    HF_OrgN =(Qi*OrgN_i)/(Qo-(HF_kpd*VF_volume)+(km_an*HF_volume))+OrgN_0
    return HF_OrgN

def VF_NH4():
    if np.any(VF_DO) < 1:
        kn = kn_an
    else: kn = kn_a 
    VF_NH4 =(Q*NH4_i+(km_a*VF_OrgN()*VF_volume)-(kn_a*VF_volume)-(VF_kpu_NH4*VF_volume))/Q
    return VF_NH4

def HF_NH4():
    if np.any(HF_DO) < 1:
        kn = kn_an
    else: kn = kn_a 
    HF_NH4 =(Qi*VF_NH4()+(km_an*HF_OrgN()*HF_volume)-(kn_an*HF_volume)-(HF_kpu_NH4*HF_volume))/Qo
    return HF_NH4

def VF_NO3():
    if np.any(VF_DO) < 1:
        kdn = kdn_an
    else: kdn = kdn_a
    VF_NO3 = ((Q*NO3_i)+(kn_a*VF_volume))/(Q+(kdn_a*VF_volume)+(VF_kpu_NO3*VF_volume))
    return VF_NO3

def HF_NO3():
    if np.any(HF_DO) < 1:
        kdn = kdn_an
    else: kdn = kdn_a 
    HF_NO3 = (Qi*(VF_NO3())+(kn_an*HF_volume))/(Qo+(kdn_an*HF_volume)+(HF_kpu_NO3*HF_volume))
    return HF_NO3

#######Adsorbent Amended CWs###########
###### Amended COD in HF ######
#rates of utilization (mg/L*day)
A_kD = 75 #denitrifiers
A_kH = 0  #aerobic heterotrophs 

#mass flux parameters
rho_biochar = 90000 #g/m3
r_biochar = .0015 #m
m_biochar = 2600 #g
a_biochar = (3/r_biochar)*(m_biochar/rho_biochar/HF_volume) #m2/m3
qcod = 49 #mg COD/g biochar
Ds_biochar = (3.5*10**-11)*864000 #m2/day

#mass flux equation
Jcod = -rho_biochar*qcod*Ds_biochar

#amended mass balance solutions 
A_HF_COD = ((Qi*VF_COD)-(A_kD*HF_volume)-(A_kH*HF_volume)+(Jcod*a_biochar*HF_volume))/Qo

print(*A_HF_COD, sep="\n") 

###### Amended nitrogen functions ######
####Rate constants 
#nitrification (mg/L*day)
A_kn_a =  250 #aerobic 
A_kn_an = 40  #anaerobic

#plant uptake of ammonia (mg/L*day)
A_VF_kpu_NH4 = 0
A_HF_kpu_NH4 = 50

#denitrification (per day)
A_kdn_an = 0.75 #anaerobic 
A_kdn_a = .25 #aerobic

#plant uptake of nitrate (per day)
A_VF_kpu_NO3 = 0
A_HF_kpu_NO3 = .10

#mass flux parameters
rho_zeolite = 877000 #g/m3
r_zeolite = .00025 #m
m_zeolite = 23000 #g
a_zeolite = (3/r_zeolite)*(m_zeolite/rho_zeolite/VF_volume) #m2/m3
qNH4= 6.75 #mg NH4/g zeolite
Ds_zeolite = (5.2*10**-12)*864000 #m2/day

#mass flux equation
JNH4 = -rho_zeolite*qNH4*Ds_zeolite 

def A_VF_NH4():
    if np.any(VF_DO) < 1:
        kn = A_kn_an
    else: kn = A_kn_a 
    VF_NH4 =(Q*NH4_i+(km_a*VF_OrgN()*VF_volume)-(A_kn_a*VF_volume)-(A_VF_kpu_NH4*VF_volume)+(JNH4*a_zeolite*VF_volume))/Q
    return VF_NH4
 
def A_HF_NH4():
    if np.any(HF_DO) < 1:
        kn = kn_an
    else: kn = kn_a 
    HF_NH4 =(Qi*(A_VF_NH4())+(km_an*HF_OrgN()*HF_volume)-(A_kn_an*HF_volume)-(A_HF_kpu_NH4*HF_volume))/Qo
    return HF_NH4

def A_VF_NO3():
    if np.any(VF_DO) < 1:
        kdn = A_kdn_an
    else: kdn = A_kdn_a
    A_VF_NO3 = ((Q*NO3_i)+(A_kn_a*VF_volume))/(Q+(A_kdn_a*VF_volume)+(A_VF_kpu_NO3*VF_volume)) 
    return A_VF_NO3

def A_HF_NO3():
    if np.any(HF_DO) < 1:
        kdn = A_kdn_an
    else: kdn = A_kdn_a 
    A_HF_NO3 = ((Qi*(A_VF_NO3()))+(A_kn_an*HF_volume))/(Qo+(A_kdn_an*HF_volume)+(A_HF_kpu_NO3*HF_volume))
    return A_HF_NO3

#example plot 
plt.title("COD in HF+biochar")
plt.xlabel("Day") 
plt.ylabel("(mg/L)")
xpoints = np.array(day)
ypoints = np.array(A_HF_COD)
plt.ylim(0,600)
plt.plot(xpoints, ypoints)
plt.show()

#write ro excel 
df = pd.DataFrame(HF_COD).T
openpyxl = r'C:\Users\Lillian\Desktop\PilotCWdata.xlsx'
writer = pd.ExcelWriter(openpyxl, engine='openpyxl')
df.to_excel(writer, sheet_name="Effluents", startrow=1, startcol=1, header=False, index=False)


 
